{"ast":null,"code":"import _classCallCheck from \"F:/Multifunctionapplication/Advanced Files/IntelliJ IDEA Project/Vue/Vue3.0/vue_test/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"F:/Multifunctionapplication/Advanced Files/IntelliJ IDEA Project/Vue/Vue3.0/vue_test/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n\n/**\n * HTTP Response.\n */\nimport Headers from './headers';\nimport Promise from '../promise';\nimport { when, isBlob, isString } from '../util';\n\nvar Response = /*#__PURE__*/function () {\n  function Response(body, _ref) {\n    var url = _ref.url,\n        headers = _ref.headers,\n        status = _ref.status,\n        statusText = _ref.statusText;\n\n    _classCallCheck(this, Response);\n\n    this.url = url;\n    this.ok = status >= 200 && status < 300;\n    this.status = status || 0;\n    this.statusText = statusText || '';\n    this.headers = new Headers(headers);\n    this.body = body;\n\n    if (isString(body)) {\n      this.bodyText = body;\n    } else if (isBlob(body)) {\n      this.bodyBlob = body;\n\n      if (isBlobText(body)) {\n        this.bodyText = blobText(body);\n      }\n    }\n  }\n\n  _createClass(Response, [{\n    key: \"blob\",\n    value: function blob() {\n      return when(this.bodyBlob);\n    }\n  }, {\n    key: \"text\",\n    value: function text() {\n      return when(this.bodyText);\n    }\n  }, {\n    key: \"json\",\n    value: function json() {\n      return when(this.text(), function (text) {\n        return JSON.parse(text);\n      });\n    }\n  }]);\n\n  return Response;\n}();\n\nexport { Response as default };\nObject.defineProperty(Response.prototype, 'data', {\n  get: function get() {\n    return this.body;\n  },\n  set: function set(body) {\n    this.body = body;\n  }\n});\n\nfunction blobText(body) {\n  return new Promise(function (resolve) {\n    var reader = new FileReader();\n    reader.readAsText(body);\n\n    reader.onload = function () {\n      resolve(reader.result);\n    };\n  });\n}\n\nfunction isBlobText(body) {\n  return body.type.indexOf('text') === 0 || body.type.indexOf('json') !== -1;\n}","map":{"version":3,"names":["Headers","Promise","when","isBlob","isString","Response","body","url","headers","status","statusText","ok","bodyText","bodyBlob","isBlobText","blobText","text","JSON","parse","Object","defineProperty","prototype","get","set","resolve","reader","FileReader","readAsText","onload","result","type","indexOf"],"sources":["F:/Multifunctionapplication/Advanced Files/IntelliJ IDEA Project/Vue/Vue3.0/vue_test/node_modules/vue-resource/src/http/response.js"],"sourcesContent":["/**\n * HTTP Response.\n */\n\nimport Headers from './headers';\nimport Promise from '../promise';\nimport {when, isBlob, isString} from '../util';\n\nexport default class Response {\n\n    constructor(body, {url, headers, status, statusText}) {\n\n        this.url = url;\n        this.ok = status >= 200 && status < 300;\n        this.status = status || 0;\n        this.statusText = statusText || '';\n        this.headers = new Headers(headers);\n        this.body = body;\n\n        if (isString(body)) {\n\n            this.bodyText = body;\n\n        } else if (isBlob(body)) {\n\n            this.bodyBlob = body;\n\n            if (isBlobText(body)) {\n                this.bodyText = blobText(body);\n            }\n        }\n    }\n\n    blob() {\n        return when(this.bodyBlob);\n    }\n\n    text() {\n        return when(this.bodyText);\n    }\n\n    json() {\n        return when(this.text(), text => JSON.parse(text));\n    }\n\n}\n\nObject.defineProperty(Response.prototype, 'data', {\n\n    get() {\n        return this.body;\n    },\n\n    set(body) {\n        this.body = body;\n    }\n\n});\n\nfunction blobText(body) {\n    return new Promise((resolve) => {\n\n        var reader = new FileReader();\n\n        reader.readAsText(body);\n        reader.onload = () => {\n            resolve(reader.result);\n        };\n\n    });\n}\n\nfunction isBlobText(body) {\n    return body.type.indexOf('text') === 0 || body.type.indexOf('json') !== -1;\n}\n"],"mappings":";;;AAAA;AACA;AACA;AAEA,OAAOA,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,YAApB;AACA,SAAQC,IAAR,EAAcC,MAAd,EAAsBC,QAAtB,QAAqC,SAArC;;IAEqBC,Q;EAEjB,kBAAYC,IAAZ,QAAsD;IAAA,IAAnCC,GAAmC,QAAnCA,GAAmC;IAAA,IAA9BC,OAA8B,QAA9BA,OAA8B;IAAA,IAArBC,MAAqB,QAArBA,MAAqB;IAAA,IAAbC,UAAa,QAAbA,UAAa;;IAAA;;IAElD,KAAKH,GAAL,GAAWA,GAAX;IACA,KAAKI,EAAL,GAAUF,MAAM,IAAI,GAAV,IAAiBA,MAAM,GAAG,GAApC;IACA,KAAKA,MAAL,GAAcA,MAAM,IAAI,CAAxB;IACA,KAAKC,UAAL,GAAkBA,UAAU,IAAI,EAAhC;IACA,KAAKF,OAAL,GAAe,IAAIR,OAAJ,CAAYQ,OAAZ,CAAf;IACA,KAAKF,IAAL,GAAYA,IAAZ;;IAEA,IAAIF,QAAQ,CAACE,IAAD,CAAZ,EAAoB;MAEhB,KAAKM,QAAL,GAAgBN,IAAhB;IAEH,CAJD,MAIO,IAAIH,MAAM,CAACG,IAAD,CAAV,EAAkB;MAErB,KAAKO,QAAL,GAAgBP,IAAhB;;MAEA,IAAIQ,UAAU,CAACR,IAAD,CAAd,EAAsB;QAClB,KAAKM,QAAL,GAAgBG,QAAQ,CAACT,IAAD,CAAxB;MACH;IACJ;EACJ;;;;WAED,gBAAO;MACH,OAAOJ,IAAI,CAAC,KAAKW,QAAN,CAAX;IACH;;;WAED,gBAAO;MACH,OAAOX,IAAI,CAAC,KAAKU,QAAN,CAAX;IACH;;;WAED,gBAAO;MACH,OAAOV,IAAI,CAAC,KAAKc,IAAL,EAAD,EAAc,UAAAA,IAAI;QAAA,OAAIC,IAAI,CAACC,KAAL,CAAWF,IAAX,CAAJ;MAAA,CAAlB,CAAX;IACH;;;;;;SAnCgBX,Q;AAuCrBc,MAAM,CAACC,cAAP,CAAsBf,QAAQ,CAACgB,SAA/B,EAA0C,MAA1C,EAAkD;EAE9CC,GAF8C,iBAExC;IACF,OAAO,KAAKhB,IAAZ;EACH,CAJ6C;EAM9CiB,GAN8C,eAM1CjB,IAN0C,EAMpC;IACN,KAAKA,IAAL,GAAYA,IAAZ;EACH;AAR6C,CAAlD;;AAYA,SAASS,QAAT,CAAkBT,IAAlB,EAAwB;EACpB,OAAO,IAAIL,OAAJ,CAAY,UAACuB,OAAD,EAAa;IAE5B,IAAIC,MAAM,GAAG,IAAIC,UAAJ,EAAb;IAEAD,MAAM,CAACE,UAAP,CAAkBrB,IAAlB;;IACAmB,MAAM,CAACG,MAAP,GAAgB,YAAM;MAClBJ,OAAO,CAACC,MAAM,CAACI,MAAR,CAAP;IACH,CAFD;EAIH,CATM,CAAP;AAUH;;AAED,SAASf,UAAT,CAAoBR,IAApB,EAA0B;EACtB,OAAOA,IAAI,CAACwB,IAAL,CAAUC,OAAV,CAAkB,MAAlB,MAA8B,CAA9B,IAAmCzB,IAAI,CAACwB,IAAL,CAAUC,OAAV,CAAkB,MAAlB,MAA8B,CAAC,CAAzE;AACH"},"metadata":{},"sourceType":"module"}